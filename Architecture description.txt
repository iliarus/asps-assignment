Architecture description.
The library based on the following architecture. There is a base abstract class (CarCollectionBase), which describes the methods to work with collection of objects (CarModel) stores in the file on the disk. The library supports files with different formats: XML, BIN. There is a concrete class to work with concrete file format, each class inherited from the base class. XmlCarCollection class works with XML files, BinCarCollection class works with BIN files. 
The main feature of the architecture is the library doesn't store the data in memory, it reads/writes the data directly to/from the file. It allow to work with actual data and it allow to decrease of using memory. But on the other hand it affects on the speed of library working, because reading/writing to the file on the disk is slowly operation than working with memory directly.
The selected architecture allows library to be easily expandable. To add a new supporting format you should provide a certain class inherited from the base class. To make the new format be convertible you should just add the appropriate key/value pair to the dictionary in the CarCollectionConverter class. To test your new format with NUnit test you should provide a class inherited from CarCollectionBaseTest with specified constructor like the others format classes. Thats all you need, no any additional code.
